/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.tjx.dto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"com.tjx.dto\",\"fields\":[{\"name\":\"tweetId\",\"type\":\"string\"},{\"name\":\"tweetMessage\",\"type\":\"string\"},{\"name\":\"created\",\"type\":\"string\"},{\"name\":\"authorId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence tweetId;
  @Deprecated public java.lang.CharSequence tweetMessage;
  @Deprecated public java.lang.CharSequence created;
  @Deprecated public java.lang.CharSequence authorId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Tweet() {}

  /**
   * All-args constructor.
   */
  public Tweet(java.lang.CharSequence tweetId, java.lang.CharSequence tweetMessage, java.lang.CharSequence created, java.lang.CharSequence authorId) {
    this.tweetId = tweetId;
    this.tweetMessage = tweetMessage;
    this.created = created;
    this.authorId = authorId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tweetId;
    case 1: return tweetMessage;
    case 2: return created;
    case 3: return authorId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tweetId = (java.lang.CharSequence)value$; break;
    case 1: tweetMessage = (java.lang.CharSequence)value$; break;
    case 2: created = (java.lang.CharSequence)value$; break;
    case 3: authorId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tweetId' field.
   */
  public java.lang.CharSequence getTweetId() {
    return tweetId;
  }

  /**
   * Sets the value of the 'tweetId' field.
   * @param value the value to set.
   */
  public void setTweetId(java.lang.CharSequence value) {
    this.tweetId = value;
  }

  /**
   * Gets the value of the 'tweetMessage' field.
   */
  public java.lang.CharSequence getTweetMessage() {
    return tweetMessage;
  }

  /**
   * Sets the value of the 'tweetMessage' field.
   * @param value the value to set.
   */
  public void setTweetMessage(java.lang.CharSequence value) {
    this.tweetMessage = value;
  }

  /**
   * Gets the value of the 'created' field.
   */
  public java.lang.CharSequence getCreated() {
    return created;
  }

  /**
   * Sets the value of the 'created' field.
   * @param value the value to set.
   */
  public void setCreated(java.lang.CharSequence value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'authorId' field.
   */
  public java.lang.CharSequence getAuthorId() {
    return authorId;
  }

  /**
   * Sets the value of the 'authorId' field.
   * @param value the value to set.
   */
  public void setAuthorId(java.lang.CharSequence value) {
    this.authorId = value;
  }

  /** Creates a new Tweet RecordBuilder */
  public static com.tjx.dto.Tweet.Builder newBuilder() {
    return new com.tjx.dto.Tweet.Builder();
  }
  
  /** Creates a new Tweet RecordBuilder by copying an existing Builder */
  public static com.tjx.dto.Tweet.Builder newBuilder(com.tjx.dto.Tweet.Builder other) {
    return new com.tjx.dto.Tweet.Builder(other);
  }
  
  /** Creates a new Tweet RecordBuilder by copying an existing Tweet instance */
  public static com.tjx.dto.Tweet.Builder newBuilder(com.tjx.dto.Tweet other) {
    return new com.tjx.dto.Tweet.Builder(other);
  }
  
  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private java.lang.CharSequence tweetId;
    private java.lang.CharSequence tweetMessage;
    private java.lang.CharSequence created;
    private java.lang.CharSequence authorId;

    /** Creates a new Builder */
    private Builder() {
      super(com.tjx.dto.Tweet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.tjx.dto.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tweetId)) {
        this.tweetId = data().deepCopy(fields()[0].schema(), other.tweetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tweetMessage)) {
        this.tweetMessage = data().deepCopy(fields()[1].schema(), other.tweetMessage);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.created)) {
        this.created = data().deepCopy(fields()[2].schema(), other.created);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.authorId)) {
        this.authorId = data().deepCopy(fields()[3].schema(), other.authorId);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Tweet instance */
    private Builder(com.tjx.dto.Tweet other) {
            super(com.tjx.dto.Tweet.SCHEMA$);
      if (isValidValue(fields()[0], other.tweetId)) {
        this.tweetId = data().deepCopy(fields()[0].schema(), other.tweetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tweetMessage)) {
        this.tweetMessage = data().deepCopy(fields()[1].schema(), other.tweetMessage);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.created)) {
        this.created = data().deepCopy(fields()[2].schema(), other.created);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.authorId)) {
        this.authorId = data().deepCopy(fields()[3].schema(), other.authorId);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'tweetId' field */
    public java.lang.CharSequence getTweetId() {
      return tweetId;
    }
    
    /** Sets the value of the 'tweetId' field */
    public com.tjx.dto.Tweet.Builder setTweetId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.tweetId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'tweetId' field has been set */
    public boolean hasTweetId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'tweetId' field */
    public com.tjx.dto.Tweet.Builder clearTweetId() {
      tweetId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'tweetMessage' field */
    public java.lang.CharSequence getTweetMessage() {
      return tweetMessage;
    }
    
    /** Sets the value of the 'tweetMessage' field */
    public com.tjx.dto.Tweet.Builder setTweetMessage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tweetMessage = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'tweetMessage' field has been set */
    public boolean hasTweetMessage() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'tweetMessage' field */
    public com.tjx.dto.Tweet.Builder clearTweetMessage() {
      tweetMessage = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'created' field */
    public java.lang.CharSequence getCreated() {
      return created;
    }
    
    /** Sets the value of the 'created' field */
    public com.tjx.dto.Tweet.Builder setCreated(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.created = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'created' field has been set */
    public boolean hasCreated() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'created' field */
    public com.tjx.dto.Tweet.Builder clearCreated() {
      created = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'authorId' field */
    public java.lang.CharSequence getAuthorId() {
      return authorId;
    }
    
    /** Sets the value of the 'authorId' field */
    public com.tjx.dto.Tweet.Builder setAuthorId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.authorId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'authorId' field has been set */
    public boolean hasAuthorId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'authorId' field */
    public com.tjx.dto.Tweet.Builder clearAuthorId() {
      authorId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.tweetId = fieldSetFlags()[0] ? this.tweetId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tweetMessage = fieldSetFlags()[1] ? this.tweetMessage : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.created = fieldSetFlags()[2] ? this.created : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.authorId = fieldSetFlags()[3] ? this.authorId : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
